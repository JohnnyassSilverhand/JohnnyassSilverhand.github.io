<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://witchpuff.github.io/</id><title>CyberWitch</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-03-30T15:26:34+08:00</updated> <author> <name>WitchPuff</name> <uri>https://witchpuff.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://witchpuff.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://witchpuff.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 WitchPuff </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>BART源码精读</title><link href="https://witchpuff.github.io/posts/barta/" rel="alternate" type="text/html" title="BART源码精读" /><published>2023-03-28T08:43:30+08:00</published> <updated>2023-03-29T22:10:28+08:00</updated> <id>https://witchpuff.github.io/posts/barta/</id> <content src="https://witchpuff.github.io/posts/barta/" /> <author> <name>WitchPuff</name> </author> <category term="Research" /> <category term="SourceCodeReading" /> <summary> BART Architecture 源码仓库地址 源码中各class的介绍与模型结构： BartLearnedPositionalEmbedding 该class定义了BART模型中的位置嵌入层。与传统的位置嵌入不同，BART采用了可学习的位置嵌入，以提高模型的泛化能力。该层的输入是token嵌入和位置编码，输出是嵌入向量。 BartAttention 该class定义了BART模型中的自注意力机制。该层的输入是query、key和value，输出是加权的value向量。BART采用了多头注意力机制，可以捕捉不同的特征。 BartEncoderLayer/BartDecoderLayer 该class定义了BART模型中的编码器层和解码器层。这两个层的结构类似，都包含了多头注意力、前向传播和残差连接等模块。编码器层用于对输入文本进行编码，解码器层用于生成目标文本。... </summary> </entry> <entry><title>Paper Summary of BART</title><link href="https://witchpuff.github.io/posts/bart/" rel="alternate" type="text/html" title="Paper Summary of BART" /><published>2023-03-14T08:43:30+08:00</published> <updated>2023-03-29T22:27:46+08:00</updated> <id>https://witchpuff.github.io/posts/bart/</id> <content src="https://witchpuff.github.io/posts/bart/" /> <author> <name>WitchPuff</name> </author> <category term="Research" /> <category term="PaperReading" /> <summary> Paper Summary of BART 本次阅读了论文 BART: Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension 语言模型预训练+下游任务fine-tune 用任意噪声函数破坏文本：随机打乱句子顺序；将文本替换为单个掩码令牌etc 学习模型来重建原始文本。 BART是一个encoder-decoder的结构（bidirectional noising encoder(bert) + left-right decoder(GPT)），其encoder端的输入是加了噪音的序列，decoder端的输入是right-shifted的序列，decoder端的目标是原序列。模型设计的目的很明确，就是在利用... </summary> </entry> <entry><title>Computer Network: Transport Layer(2)</title><link href="https://witchpuff.github.io/posts/transport/" rel="alternate" type="text/html" title="Computer Network: Transport Layer(2)" /><published>2023-02-11T09:40:30+08:00</published> <updated>2023-03-30T15:26:12+08:00</updated> <id>https://witchpuff.github.io/posts/transport/</id> <content src="https://witchpuff.github.io/posts/transport/" /> <author> <name>WitchPuff</name> </author> <category term="Courses" /> <summary> Transport Layer Transport-Layer Services Multiplexing &amp;amp; Demultiplexing UDP RDT TCP 1. Transport-Layer Services 1.1 Transport layer protocols 1.2 Network Layer protocols 2. Multiplexing &amp;amp; Demultiplexing 2.1 definition 2.2 Multipl... </summary> </entry> <entry><title>Computer Network: Data Plane of Network Layer</title><link href="https://witchpuff.github.io/posts/NetworkLayerDataPlane/" rel="alternate" type="text/html" title="Computer Network: Data Plane of Network Layer" /><published>2023-02-10T09:36:30+08:00</published> <updated>2023-03-29T21:57:24+08:00</updated> <id>https://witchpuff.github.io/posts/NetworkLayerDataPlane/</id> <content src="https://witchpuff.github.io/posts/NetworkLayerDataPlane/" /> <author> <name>WitchPuff</name> </author> <category term="Courses" /> <summary> Network Layer: Data Plane 1. Network Layer Services 2. Router 2.1 input port processing 2.2 Switching fabric 2.2.1 switching via memory 2.2.2 Switching via a bus 2.2.3 Switching via an interconnection network 2.3 Output Port Processing ... </summary> </entry> <entry><title>Computer Network: Control Plane of Network Layer</title><link href="https://witchpuff.github.io/posts/NetworkLayerControlPlane/" rel="alternate" type="text/html" title="Computer Network: Control Plane of Network Layer" /><published>2023-02-10T09:36:30+08:00</published> <updated>2023-03-29T21:57:24+08:00</updated> <id>https://witchpuff.github.io/posts/NetworkLayerControlPlane/</id> <content src="https://witchpuff.github.io/posts/NetworkLayerControlPlane/" /> <author> <name>WitchPuff</name> </author> <category term="Courses" /> <summary> Network Layer: Control Plane RIP, Router Information Protocol OSPF(Open Shortest Path First，开放式最短路径优先) 层次化路由 Network Layer: Control Plane 路由算法 集中式：全局网络知识计算，需要知道网络中每条链路的开销，具有全局状态信息的算法被称为链路状态 分散式：迭代、分布式计算最低开销路径 静态/动态 负载敏感/负载迟钝 链路状态路由选择算法（Link state broadcast，LS算法），知道每条链路的开销 Dijkstra prim 距离向量路由选择算法（Distance-Vector，DV），迭代异步分布式 $d_x(y)=min_v{c(... </summary> </entry> </feed>
